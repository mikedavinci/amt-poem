//+------------------------------------------------------------------+
//| Instrument Specifications and Constants                             |
//+------------------------------------------------------------------+
#define FOREX_MAX_SPREAD 0.00025  // 2.5 pips for 5-digit pairs
#define CRYPTO_MAX_SPREAD 5.0     // 5.0 points for 2-digit pairs

//+------------------------------------------------------------------+
//| Spread Validation Function                                         |
//+------------------------------------------------------------------+
bool IsSpreadAcceptable(string symbol) {
    // Get current spread in points
    double currentSpread = MarketInfo(symbol, MODE_SPREAD) * MarketInfo(symbol, MODE_POINT);
    
    // Determine pair type
    bool isCryptoPair = (StringFind(symbol, "BTC") >= 0 || 
                        StringFind(symbol, "ETH") >= 0 || 
                        StringFind(symbol, "LTC") >= 0);
    
    // Set maximum allowed spread based on pair type
    double maxAllowedSpread = isCryptoPair ? CRYPTO_MAX_SPREAD : FOREX_MAX_SPREAD;
    
    // Check if spread exceeds maximum allowed
    if(currentSpread > maxAllowedSpread) {
        LogWarning(StringFormat(
            "Trade prevented - Spread exceeds maximum allowed for %s:" +
            "\nCurrent Spread: %.5f" +
            "\nMaximum Allowed: %.5f" +
            "\nExcess Amount: %.5f" +
            "\nPair Type: %s",
            symbol,
            currentSpread,
            maxAllowedSpread,
            currentSpread - maxAllowedSpread,
            isCryptoPair ? "Crypto" : "Forex"
        ));
        return false;
    }
    
    // Log successful spread check
    LogDebug(StringFormat(
        "Spread check passed for %s:" +
        "\nCurrent Spread: %.5f" +
        "\nMaximum Allowed: %.5f" +
        "\nPair Type: %s",
        symbol,
        currentSpread,
        maxAllowedSpread,
        isCryptoPair ? "Crypto" : "Forex"
    ));
    
    return true;
}

//+------------------------------------------------------------------+
//| Implement spread validation in ProcessSignal                       |
//+------------------------------------------------------------------+
void ProcessSignal(SignalData &signal) {
    // Initial symbol validation
    if (MarketInfo(signal.ticker, MODE_BID) == 0) {
        LogError(StringFormat("Error: Invalid symbol %s", signal.ticker));
        return;
    }

    // Spread validation check
    if (!IsSpreadAcceptable(signal.ticker)) {
        LogInfo(StringFormat(
            "Signal processing halted for %s due to unacceptable spread conditions",
            signal.ticker
        ));
        return;
    }

    // Continue with existing ProcessSignal logic...
    [Previous ProcessSignal Implementation]
}